<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Levent Kaya</title>
    <link>https://leventkaya.dev/</link>
    <description>Recent content on Levent Kaya</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://leventkaya.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sifirdan Bir Compiler Programlamak - 1 - Lexer</title>
      <link>https://leventkaya.dev/posts/compiler_programlama_1/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leventkaya.dev/posts/compiler_programlama_1/</guid>
      <description>Bir Compiler Programlama - 1 Lexer Serinin bu yazisinda compilerimizi gercekten programlamaya basliyoruz. Ilk implement etmemiz gereken yapi bir lexer.
Lexerin amaci gelen input kayank kodu lexical elementlerine yani tokenlerine ayirmak. Bugun sadece 5 tane token implement edecegiz ama merak etmeyin, seri sonunda sikintisiz calisan bir C compilerimiz olucak.
Bugun lexerimizin tanimasini istedigimiz tokenler + , -, * , / ve INTEGER_LITERAL tokenleri.
DEFS.H Tokenleri tutmak icin bir yapiya ihtiyacimiz var, bunun icin defs(definitions).</description>
    </item>
    
    <item>
      <title>Sifirdan Bir Compiler Programlamak - 0 - Giris</title>
      <link>https://leventkaya.dev/posts/compiler_programlama_0/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leventkaya.dev/posts/compiler_programlama_0/</guid>
      <description>Bir Compiler Programlamak - 0 Giris Bir compiler programlamaya karar verdim. Daha onceden basit assemblerlar, disassemblerlar, basit diller icin ufak compilerlar kodlamistim. Ama hic kendi kendini compile edebilen gercek bir compiler programlamadim.
Bu yuzden bu blog serisinde gercek bir compilerin nasil programlandigini arsivlemek istedim. Blog serisi ve development sureci paralel gercekleseceginden bu yazilari okuduktan sonra yazinin altindaki proje linkinden implement edilmis kodlari da bulabilirsiniz. Umarim benim ve sizler icin yararli olur :)</description>
    </item>
    
    <item>
      <title>x86_64 Islemcilerde Assembly Programlama - 3 - Ilk Program</title>
      <link>https://leventkaya.dev/posts/asm_programlama_3/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leventkaya.dev/posts/asm_programlama_3/</guid>
      <description>BOLUM 3 - ILK PROGRAM Merhaba, serinin bu bolumunde ilk assembly programimizi yazacagiz. Bu bolumde yazdiklariniz size ilk basta yabanci gelebilir ve gozunuzu korkutabilir ama bu hic onemli degil. Ilerleyen surecte her seyin nasil isledigi oturacaktir.
Programa Giris Ilk programimiz oldukca basit, o kadar basit ki programimiz cikis yapmak disinda hicbir sey yapmiyor. Bu bolumde yazdiklarinizi anlamak icin ugrasmayin bu bolumun tek gayesi sizi assembly programlamaya alistirmak ve bir linux makinede nasil calistirildigini gostermek.</description>
    </item>
    
    <item>
      <title>x86_64 Islemcilerde Assembly Programlama - 1 &amp; 2 - Bilgisayar Mimarisi</title>
      <link>https://leventkaya.dev/posts/asm_programlama_1/</link>
      <pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leventkaya.dev/posts/asm_programlama_1/</guid>
      <description>BOLUM 1 - BASLANGIC Merhabalar, bu blog serisinde x86_64 mimarisine sahip islemcilerde Assembly programlamayi anlatiyor olacagim.
Bu seride Jonathan Bartlett&amp;rsquo;in Programming From Ground Up kitabini referans alacagim.
1.1 Gelistirme Ortami Bu blog serisine baslarken gelistirme ortamindan bahsetmek istiyorum. Seri boyunca programlari GNU\Linux ortaminda gelistirecek ve GCC tool setini kullanacagim. Bu seriyi bir Linux makinada takip etmenizi siddetle oneririm. Ben Arch Linux kullaniyorum fakat kullandiginiz distronun pek de bir onemi yok.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leventkaya.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leventkaya.dev/about/</guid>
      <description>Hi there üëã I&amp;rsquo;m a Computer Scientist in Istanbul, Turkey üáπüá∑. I am mainly working on Deep Learning and Low Level Programming NOW ‚ú® Crafted last Intel 8080 disassembler; üíæ Working on Kernel Development BIO üè¢ I&amp;rsquo;m currently working on OS Development ‚öôÔ∏è I use daily: .C, .C++, .Python, .NASM üå± Learning all about Deep Learning and Low Level Programming üí¨ Ping me about Open Source Software, Deep Learning, Assembly Language, C Programming, Kernel Development üì´ Reach me: github.</description>
    </item>
    
  </channel>
</rss>
