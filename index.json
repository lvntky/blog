[{"content":"Bir Compiler Programlama - 1 Lexer Serinin bu yazisinda compilerimizi gercekten programlamaya basliyoruz. Ilk implement etmemiz gereken yapi bir lexer.\nLexerin amaci gelen input kayank kodu lexical elementlerine yani tokenlerine ayirmak. Bugun sadece 5 tane token implement edecegiz ama merak etmeyin, seri sonunda sikintisiz calisan bir C compilerimiz olucak.\nBugun lexerimizin tanimasini istedigimiz tokenler + , -, * , / ve INTEGER_LITERAL tokenleri.\nDEFS.H Tokenleri tutmak icin bir yapiya ihtiyacimiz var, bunun icin defs(definitions).h adinda bir header dosyasi olusturacak ve tokenlerimizi burda tutacagim.\nstruct token { int token; int int_value; }; Gordugunuz gibi tokenimizi ve eger tokenimiz bir INTEGER_LITERAL ise onun degerini bu struct icinde tutacagiz. Ayrica bir Enum icinde tokenlerimizin neler oldugunu da belirtmeliyiz ki bu tokenlerle karsilastigimizda onlarin ne oldugunu anladiktan sonra output olarak da soyleyebilelim.\nenum { TOKEN_PLUS, TOKEN_MINUS, TOKEN_STAR, TOKEN_SLASH, TOKEN_INTLIT }; DATA.H Bu header dosyasinda tokenlerden ziyade uzerinde lexial analiz yaptigimiz kaynak kodun verilerini tutuyorum.\nextern_ int line; extern_ int putback_token; extern_ FILE *infile; line degiskeni olasi bir hatada (ornegin tanimlanamayan bir token) hatanin hangi satirda gerceklestigini kullaniciya bildirmek icin tutuluyor. putback_token bazi durumlarda bu lexical analizi yaparken gerekenden fazla karakteri okuyabiliriz, bununun icin fazla okunan tokeni bu degiskende tutup streame geri gondermek icin bu degiskeni kullaniyoruz. infile degiskeni direk bizim uzerinde analiz yaptigimiz *.c kaynak kodumuz, yani simdilik txt dosyalari uzerinde test yapiyoruz ama umarim ileride .c olacak :)\nSCAN.C Lexerimizda asil isi yapan dosyamiz bu. Ilk once lexical analiz icin bir sonraki karaktere gecme fonksiyonunu kodladim.\nstatic int next() { int c; if(putback_token) { c = putback_token; putback_token = 0; return c; } c = fgetc(infile); if(c == \u0026#39;\\n\u0026#39;){ line++; } return c; } Eger streamde dolasirken putback_tokenimiz 0 dan farkli bir deger almissa bu fazla ileri gittigimiz ve streame o tokeni geri koymamiz gerektigi anlamina geliyor. Bu yuzden c degiskenimizi putback_token degiskenimize atiyor, put_backi yeniden sifirliyor ve c yi donduruyoruz. Eger boyle bir durum yoksa fgetc ile streamden yeni karakterimizi aliyoruz.\nEger yeni bir satira gecmissek bu sefer de line degiskenimizi arttiyoruz ki hangi satirda oldugumuzu bilelim ve sikinti cikmasi halinde bunu kullaniciya bildirebilelim.\nstatic int skip() { int c; c = next(); while(c == \u0026#39; \u0026#39; || c == \u0026#39;\\t\u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;/r\u0026#39; || c == \u0026#39;\\f\u0026#39;) { c = next(); } return c; } Bu fonksiyonda mevcut karakterimizin bir token degil de whitespace ile karsilastiginda skiplemesini sagliyoruz.\n// scan the tokens int scan(struct token *t) { int c; c = skip(); switch(c) { case EOF: return 0; case \u0026#39;+\u0026#39;: t-\u0026gt;token = TOKEN_PLUS; break; case \u0026#39;-\u0026#39;: t-\u0026gt;token = TOKEN_MINUS; break; case \u0026#39;*\u0026#39;: t-\u0026gt;token = TOKEN_STAR; break; case \u0026#39;/\u0026#39;: t-\u0026gt;token = TOKEN_SLASH; break; default: if(isdigit(c)){ t-\u0026gt;token = TOKEN_INTLIT; t-\u0026gt;int_value = scanint(c); } } return 1; } asil scan islemi burada gerceklesiyor. Karakterimizin karsilastigi tokene gore token tipini set ediyoruz. Eger bir integer ile karsilasmissak tokenin bir integer oldugunu ve degerini set ediyoruz.\nMAIN.C Geriye bir tek lexerimizi calistirmak kaliyor.\nstatic void init() { line = 1; putback_token = \u0026#39;\\n\u0026#39;; } Init fonksiyonu data.h headirindaki dosya bilgilerini set ediyor.\nchar *tok_str[] = {\u0026#34;+\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;intlit\u0026#34;}; static void scan_file() { struct token t; while(scan(\u0026amp;t)) { printf(\u0026#34;token %s\\n\u0026#34;, tok_str[t.token]);\t} if(t.int_value == TOKEN_INTLIT) { printf(\u0026#34;, value %d\u0026#34;, t.int_value); } printf(\u0026#34;\\n\u0026#34;); } Burada dosyamizi scan etmeye basliyoruz. tabiki scan.c deki scan() fonksiyonumuz yardimi ile. Ardindan karsilastigimiz ilgili tokenleri output olarak yazdiriyoruz.\nvoid main(int argc, char** argv) { if(argc != 2) { usage(argv[0]); } init(); if((infile = fopen(argv[1], \u0026#34;r\u0026#34;)) == NULL) { fprintf(stderr, \u0026#34;Unable to open %s: %s:\\n\u0026#34;, argv[1], strerror(errno)); exit(1); } scan_file(); exit(0); } main() fonksiyonu ise tum bunlari calistiriyor test icin hazirladigimiz dosyalari okuyor ve scan ediyor.\nTest ve Ciktilar tokenleri almak bu kadardi, simdi bu 5 token icin ufak tefek bir kac test dosyasi hazirladim, sonuclara bakalim.\n[x] TEST 01 test01 dosyamizin icerigi su sekilde\n3 + 5 / 2 - 3 * 8 Bizim scannerimizin $ ./scanner test/test01 cikitisi ise soyle:\ntoken intlit token + token intlit token / token intlit token - token intlit token * token intlit ilk test icin epey iyi calisti. Diger teslerin icerik ve ciktilari da su sekilde\n[x] TEST02 test02 dosyasi icerigi\n2 + 3 * 5 - 8 / 3 program ciktisi\ntoken intlit token + token intlit token * token intlit token - token intlit token / token intlit [x] TEST03 test03 dosyasi icerigi 1 program ciktisi\ntoken intlit Evet farkli durumlar icin lexerimizin oldukca iyi calistigini gorduk, bu epey mutluluk verici.\nBir Sonraki Bolumde tokenleri taniyan, fazla scan ettiginde bunlari geri veren, whitespaceleri gorunce skipleyen bir lexer yazdik. Serinin bir sonraki bolumunde bir parser yazicak ve dilimizin gramerini cozumlemeye calisacagiz\nUnutmadan tekrar hatirlatayim, bu blog serisinde yazdigim her satir kodu paylasmam imkansiz. Eger kodun tamamini gormek, degistirmek, kullanmak yada katkida bulunmak istiyorsaniz, her seri sonunda projenin blog linkini paylasiyorum. SCC- Simple C Compiler\n","permalink":"https://leventkaya.dev/posts/compiler_programlama_1/","summary":"Bir Compiler Programlama - 1 Lexer Serinin bu yazisinda compilerimizi gercekten programlamaya basliyoruz. Ilk implement etmemiz gereken yapi bir lexer.\nLexerin amaci gelen input kayank kodu lexical elementlerine yani tokenlerine ayirmak. Bugun sadece 5 tane token implement edecegiz ama merak etmeyin, seri sonunda sikintisiz calisan bir C compilerimiz olucak.\nBugun lexerimizin tanimasini istedigimiz tokenler + , -, * , / ve INTEGER_LITERAL tokenleri.\nDEFS.H Tokenleri tutmak icin bir yapiya ihtiyacimiz var, bunun icin defs(definitions).","title":"Sifirdan Bir Compiler Programlamak - 1 - Lexer"},{"content":"Bir Compiler Programlamak - 0 Giris Bir compiler programlamaya karar verdim. Daha onceden basit assemblerlar, disassemblerlar, basit diller icin ufak compilerlar kodlamistim. Ama hic kendi kendini compile edebilen gercek bir compiler programlamadim.\nBu yuzden bu blog serisinde gercek bir compilerin nasil programlandigini arsivlemek istedim. Blog serisi ve development sureci paralel gercekleseceginden bu yazilari okuduktan sonra yazinin altindaki proje linkinden implement edilmis kodlari da bulabilirsiniz. Umarim benim ve sizler icin yararli olur :)\nTODO Yazacagim compiler icin kendime birkac hedef belirledim.\nSelf-compiling bir compiler olmali. Yani kendini compile edebilen gercek bir compiler yazmak istiyorum. Gercek bir mimaride calismali. Daha once varsayimsal makinelerde calisan compilerlar gormustum, daha once chip8 gibi basit makine interpreterlari da yazmistim. Bu projenin farkli olmasini ve x86_64 makinelerde gercekten compile islemini gerceklestirebilmesini istiyorum. Burada verecegim bilgiler teorikten ziyade pratik olmali. Compiler developmenti icin efsane dragon booku duymussunuzdir. Yani bu blogu okuyorsaniz duydugunuzu var sayiyorum. Bence harika bir kitap ama bu blog serisinde ana odagim compilerin ne oldugunu anlatmaktan ziyade gercekten calisan bir urun cikarmak. Hedef Dil Bilgisayar programlari yazmaya yaklasik 10-11 sene once ortaokulda baslamistim. Sicak bir ogleden sonraydi, neden nasil hangi motivasyonla oldu hatirlamiyorum ama youtube tutoriallari izleyip basit bir hesap makinesi yaptigimi hatirliyorum.Bu hesap makinesini C ile yazmistim. Simdi 10 sene sonra bu isi profesyonel olarak icra ederken bunu soylemek ne derece dogru bilmiyorum fakat soyleyecegim, hala, 10 sene dahi sonra en zevk aldigim dil C. Dolayisiyla bu compilerin da hedef aldigi dil C olacak, kendi kendini compile edebilen bir C compileri yazmayi hedefliyorum. Tabiki tum C18 ozelliklerini implement edemem ama elimden geldigince calisan C subseti compile eden bir proje gelistirmeye calisicam.\nGelistirme Ortami Bu blog serisini herhangi bir Linux makinede takip edebilirsiniz. Ben genellikle Arch Linux yada Ubuntu kullaniyorum. Arch Linux icin\nsudo pacman -S base-devel Debian tabali herhangi bir distro icin de\nsudo apt-get install built-essentials Yeterli olacaktir. Siz bu iki distro disinda bir distroda calisiyorsaniz paket managerinize bagli olarak ufak degisiklikler olabilir ama hangi paketi indirmeniz gerektigini bulmak cok zor olmayacaktir.\nGelecek Bolumde Gelecek bolumde projemizin ilk admini atmaya basliyoruz, basit bir lexer kodlayacagiz bu sayede input olarak gelen c dosyasini tokenlerine ayirabilecegiz.\nBlog serisinin devaminda ve bitiminde ne zaman isterseniz projede yazilmis olan kodlari inceleyebilir, forklayip degistirebilir ve daha iyi olacagini dusundugunuz degisiklikler varsa pull requst acabilirsiniz.\nProje Linki: SCC- Simple C Compiler ","permalink":"https://leventkaya.dev/posts/compiler_programlama_0/","summary":"Bir Compiler Programlamak - 0 Giris Bir compiler programlamaya karar verdim. Daha onceden basit assemblerlar, disassemblerlar, basit diller icin ufak compilerlar kodlamistim. Ama hic kendi kendini compile edebilen gercek bir compiler programlamadim.\nBu yuzden bu blog serisinde gercek bir compilerin nasil programlandigini arsivlemek istedim. Blog serisi ve development sureci paralel gercekleseceginden bu yazilari okuduktan sonra yazinin altindaki proje linkinden implement edilmis kodlari da bulabilirsiniz. Umarim benim ve sizler icin yararli olur :)","title":"Sifirdan Bir Compiler Programlamak - 0 - Giris"},{"content":"BOLUM 3 - ILK PROGRAM Merhaba, serinin bu bolumunde ilk assembly programimizi yazacagiz. Bu bolumde yazdiklariniz size ilk basta yabanci gelebilir ve gozunuzu korkutabilir ama bu hic onemli degil. Ilerleyen surecte her seyin nasil isledigi oturacaktir.\nPrograma Giris Ilk programimiz oldukca basit, o kadar basit ki programimiz cikis yapmak disinda hicbir sey yapmiyor. Bu bolumde yazdiklarinizi anlamak icin ugrasmayin bu bolumun tek gayesi sizi assembly programlamaya alistirmak ve bir linux makinede nasil calistirildigini gostermek. Bu postun devaminda programin nasil calistigini detaylandiracak ve izah edecegiz, ama simdi yazalim.\n#PURPOSE: Simple program that exists and return a # status code back to the linux kernel # #Input: None # # #Outpur: Returns a status code # It can be viewed by typing # # echo $? # #VARIABLES: # %eax, holds the system call number # %ebx, holds the return status # .section .data .section .text .globl _start _start: movl $1, %eax # this is the linux kernel command # number (system call) for exiting # a program movl $0, %ebx # this is the status number we will # return to the operating system int $0x80 # wakes up kernel to run # the exit command. ","permalink":"https://leventkaya.dev/posts/asm_programlama_3/","summary":"BOLUM 3 - ILK PROGRAM Merhaba, serinin bu bolumunde ilk assembly programimizi yazacagiz. Bu bolumde yazdiklariniz size ilk basta yabanci gelebilir ve gozunuzu korkutabilir ama bu hic onemli degil. Ilerleyen surecte her seyin nasil isledigi oturacaktir.\nPrograma Giris Ilk programimiz oldukca basit, o kadar basit ki programimiz cikis yapmak disinda hicbir sey yapmiyor. Bu bolumde yazdiklarinizi anlamak icin ugrasmayin bu bolumun tek gayesi sizi assembly programlamaya alistirmak ve bir linux makinede nasil calistirildigini gostermek.","title":"x86_64 Islemcilerde Assembly Programlama - 3 - Ilk Program"},{"content":"BOLUM 1 - BASLANGIC Merhabalar, bu blog serisinde x86_64 mimarisine sahip islemcilerde Assembly programlamayi anlatiyor olacagim.\nBu seride Jonathan Bartlett\u0026rsquo;in Programming From Ground Up kitabini referans alacagim.\n1.1 Gelistirme Ortami Bu blog serisine baslarken gelistirme ortamindan bahsetmek istiyorum. Seri boyunca programlari GNU\\Linux ortaminda gelistirecek ve GCC tool setini kullanacagim. Bu seriyi bir Linux makinada takip etmenizi siddetle oneririm. Ben Arch Linux kullaniyorum fakat kullandiginiz distronun pek de bir onemi yok.\nBOLUM 2 - BILGISAYAR MIMARISI Bir program yazmaya baslamadan once, bilgisayarlarin yazdigimiz programlari nasil anlamlandirdigini anlamamiz gerekiyor. Assembly ogrenmenin en iyi yani da bu, neyi neden yaptigimizi ve tum bunlarin nasil gerceklestigini anlamya yetenegi kazaniyoruz.\nModern bilgisayarlar Von Neumann mimarisini baz alarak calisirlar. Von Neumann mimarisi bilgisayarlari CPU ve Memory olmak uzere iki ana parcaya ayirir.\n2.1 Memory Bilgisayar memorysi bir posta kutusuna cok benzer. Her ikisinin de belirli sayida mektup yada veri tutma kapasitesi vardir. Ornegin 256kBlik bir bilgisayar memorysine sahipseniz kabaca, 256 milyon belirli sayida veri tutma alanina sahipsiniz demektir. Her alanin bir adresi ve ayni sabit sayida veri tutma alani vardir.\nBilgisayarimizla ilgili kaydedilmesi gereken hemen her sey memory\u0026rsquo;de bulunur.\nekrandaki imleciniz konum su an bu blogu okudugunuz browserin ebati kullandiginiz yazi fontunun buyuklugu toolbarinizdaki grafikler ve akliniza gelebilecek diger tum seyler! Buna ek olarak, Von Neumann mimarisine gore bilgisayarimizi kontrol eden programlar da burada, memoryde saklanir. Bilgisayarimizin gozunden bir kaynak kodu yani yazdigimiz program ve bu programin ciktisi arasinda hicbir fark yokturk.\n2.2 CPU Peki bir bilgisayar nasil isler? Tahmin edersiniz ki verileri tutmak bir bilgisayarin islemesi icin yeterli degildir. Calisan bir bilgisayar icin bu verilere ulasmamiz, degistirmemiz, uzerinde islemler yapabilmemiz de gerekir. Bu noktada bu gorevi CPU ustlenir.\nCPU memorydeki verileri okur ve calistirir. Bu isleme fetch-execute cycle denir. Bu gorevi tamamlamak icin bir CPU asagidaki bilesenlere ihtiyac duyar:\nProgram Counter Instruction Decoder Data Bus General Purpose Registers ALU (Arithmatic Logic Unit) Program Counter memoryden gelecek bir sonraki talimatin yerini gosterir. Boylece fecth execute cycle aksamadan devam edebilir. Herhangi bir veri ile bir pgoramin kaynak kodunun memoryde ayni sekilde tutuldugunu sadece CPU nun bu iki farkli veriyi isleme biciminin farkli oldugunu soylemistik. Program Counter islenecek bir sonraki talimatin adresini tutar, CPU Program Counter\u0026rsquo;a bakar ve tuttugu memory adresinde hangi talimat varsa onu calistirir.\nArdindan memoryden alinan bu talimat, instruction decoder a gelir. Burada bu talimatin CPU\u0026rsquo;dan ne gibi bir islem bekledigi ve bu islemden hangi verilerin etkilenecegi anlamdirilir(ornegin memorydeki 1. sayi ile 2.sayiyi topla)\nBu atama islemleri icin Data Bus kullanilir. Data Bus memory ve CPU arasindaki koprudur, yapilmasi istenilen talimatta isleme hangi memory adreslerinin dahil olup olmayacagi bu kopru ile saglanir.\nMemorynin disinda CPU icerisinde kendine ozel, hizli hafiza alanlari barindirir. Bu alanlar register olarak adlandirilir ve general purpose registers - special purpose registers olmak uzere ikiye ayrilir. General Purpose Registerlarda toplama, cikarma, karsilastirma gibi ana islemler yapilir. Buna ragmen CPUlarda oldukca kisitli sayida register bulunur. Veriler ve talimatlar memoryden CPU\u0026rsquo;ya tasinir burada islem gordukten sonra data bus vasitasiyla yeniden memorye gonderilir. Serinin ilerleyen kisminda, generap ve special registerlari daha detayli isleyecegiz.\nGereken veriler CPU\u0026rsquo;ya gonderildikten sonra bu veri ve decode instructionlar ALU\u0026rsquo;ya gelir ve burada gerekli islemi gorur, ardindan sonuc, data bus yardimiyla memoryde ilgili yere geri gonderilir.\n2.3 Data Accessing Metodlari Islemcilerde dataya erismenin birden farkli yolu vardir, bunlara data accesing metodlari denir.\nBunlardan en basiti immidiate moddur. Ornegin bir registeri 0\u0026rsquo;a esitlemek istiyorsak, bilgisayara 0 degereini okuyacak bir adres vermek yerine direk olarak 0 degerini atariz.\nregister addressing mod\u0026rsquo;da instruction bir memory adresi yerine ulasilacak bir register barindirir. bunlar disinda diger tum modlar adresslerle dataya ulasir.\ndirect adressing mode\u0026rsquo;da instruction bir memory adresi barindirir. ornegin bir registera direct mod ile veri yuklemek istersem, bu registera memorydeki xxxx konumuna git derim bunun neticesinde bu registera xxxx konumundaki degeri atamis olurum. Burda onemli olan nokta registera xxxx degerini degil memoryde xxxx adresinde bulunan degeri yukluyor olmam.\nindexed modunda, instruction bir hafıza adresi içerir. erişim ve ayrıca bu adresi dengelemek için bir dizin kaydı da belirtir.\nindirect adressing modunda, instruction, datanin yerini gosteren pointeri barindiran bir register icerir.\nson olarak base pointer adressing mode bulunur, serinin devaminda kullanacagimiz icin simdilik bunu giris kisminda aciklamiyorum.\nBolum 1 Sonu\u0026hellip; Bu bolumde anlatabileceklerim bu kadardi. Assembly programlamak icin bilmemiz gereken temel bilgisayar mimarisi konularini ele almaya calistim. Serinin bir sonraki bolumunden ilk ve dolayisiyla cok basit assembly programimizi yazacagiz.\n","permalink":"https://leventkaya.dev/posts/asm_programlama_1/","summary":"BOLUM 1 - BASLANGIC Merhabalar, bu blog serisinde x86_64 mimarisine sahip islemcilerde Assembly programlamayi anlatiyor olacagim.\nBu seride Jonathan Bartlett\u0026rsquo;in Programming From Ground Up kitabini referans alacagim.\n1.1 Gelistirme Ortami Bu blog serisine baslarken gelistirme ortamindan bahsetmek istiyorum. Seri boyunca programlari GNU\\Linux ortaminda gelistirecek ve GCC tool setini kullanacagim. Bu seriyi bir Linux makinada takip etmenizi siddetle oneririm. Ben Arch Linux kullaniyorum fakat kullandiginiz distronun pek de bir onemi yok.","title":"x86_64 Islemcilerde Assembly Programlama - 1 \u0026 2 - Bilgisayar Mimarisi"},{"content":"Hi there 👋 I\u0026rsquo;m a Computer Scientist in Istanbul, Turkey 🇹🇷. I am mainly working on Deep Learning and Low Level Programming NOW ✨ Crafted last Intel 8080 disassembler; 💾 Working on Kernel Development BIO 🏢 I\u0026rsquo;m currently working on OS Development ⚙️ I use daily: .C, .C++, .Python, .NASM 🌱 Learning all about Deep Learning and Low Level Programming 💬 Ping me about Open Source Software, Deep Learning, Assembly Language, C Programming, Kernel Development 📫 Reach me: github.com/lvntky 🏋️‍♂️ Fun Fact: I\u0026rsquo;am very into bodybuilding and powerlifting. ","permalink":"https://leventkaya.dev/about/","summary":"Hi there 👋 I\u0026rsquo;m a Computer Scientist in Istanbul, Turkey 🇹🇷. I am mainly working on Deep Learning and Low Level Programming NOW ✨ Crafted last Intel 8080 disassembler; 💾 Working on Kernel Development BIO 🏢 I\u0026rsquo;m currently working on OS Development ⚙️ I use daily: .C, .C++, .Python, .NASM 🌱 Learning all about Deep Learning and Low Level Programming 💬 Ping me about Open Source Software, Deep Learning, Assembly Language, C Programming, Kernel Development 📫 Reach me: github.","title":""}]